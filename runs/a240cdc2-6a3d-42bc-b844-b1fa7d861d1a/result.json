{"status": "success", "type": "pdf", "task_id": "a240cdc2-6a3d-42bc-b844-b1fa7d861d1a", "file_name": "a240cdc2-6a3d-42bc-b844-b1fa7d861d1a_0071773ea04a8fdb61ecf4cab4c7cde5.pdf", "content": "\n--- 第 1 页 ---\nLecture 10 -- K-Nearest NeighbourProf. Xiaowei Huanghttps://cgi.csc.liv.ac.uk/~xiaowei/(Attendance Code:  406355)\n\n--- 第 2 页 ---\nUp to now, \nMachine Learning Basic Knowledge \nSafety and Reliability Properties (but the algorithms on how to attack and defend will be introduced later)\nDecision Tree Learning\n--- 第 3 页 ---\nConfidence for decision tree (example)\n•Random forest:•Multiple decision trees are trained, by using different resamples of your data.•Probabilities can be calculated by the proportion of decision trees which vote for each class. •For example, if 8 out of 10 decision trees vote to classify an instance as positive, we say that the confidence is 8/10. Here, the confidences of all classes add up to 1\n--- 第 4 页 ---\nToday ’s Topics – K-nearest neighbor\nBasic AlgorithmHow can we determine similarity/distanceStandardizing numeric features (leave this to you) \nSpeeding up k-NNEdited nearest neighbour k-d trees for nearest neighbour identification\nVariants of k-NN K-NN regressionDistance-weighted nearest neighbor Locally weighted regression to handle irrelevant features\nDiscussionsStrengths and limitation of instance-based learning, which is a predication based on the similarity of the query to its nearest neighbor(s))Algorithmic content\n--- 第 5 页 ---\nK-NN algorithm, illustrated\n\n--- 第 6 页 ---\nNearest-neighbor classification \n•Learningstage• Given a training set (x(1), y(1)) ... (x(m) , y(m)), do nothing•(it’s sometimes called a lazylearner) •Classificationstage•given: an instance x(q)to classify•find the training-set instance x(i)that is most similar to x(q)•return the class value y(i) \n--- 第 7 页 ---\nThe decision regions for nearest-neighbor classification •Voronoi diagram: each polyhedron indicates the region of feature space that is in the nearest neighborhood of each training instance \nFor the case when k=1 and we have two features X1and X2\n--- 第 8 页 ---\nNearest Neighbor •Less than 20 attributes per instance •Lots of training data When to Consider •Training is very fast•Learn complex target functions •Do not lose information Advantages \n•Slow at query time•Easily fooled by irrelevant attributes Disadvantages \n--- 第 9 页 ---\nk-nearest-neighborclassification: Algorithm \n•classification task•given: an instance x(q)to classify •find the ktraining-set instances (x(1), y(1))... (x(k), y(k)) that are the most similar to x(q)•return the class value •(i.e. return the class that has the most number of instancesin the k training instances)\n\n--- 第 10 页 ---\nExample•Suppose all features are categorical  •Hamming distance (or L0norm): count the number of features for which two instances differ •Example: X = (Weekday, Happy?, Weather)  Y = AttendLecture? •D : in the table•New instance: <Friday, No, Rain>•Distances = {2, 3, 1, 2} •For 1-nn, which instances should be selected? •For 2-nn, which instances should be selected? •For 3-nn, which instances should be selected? v1v2v3yWedYesRainNoWedYesSunnyYesThuNoRainYesFriYesSunnyNoFriNoRainNew datum\n--- 第 11 页 ---\nExample•Example: X = (Weekday, Happy?, Weather)  Y = AttendLecture? •New instance: <Friday, No, Rain>•For 3-nn, selected instances: {(<Wed, Yes, Rain>, No), (<Thu, No, Rain>, Yes), (<Fri, Yes, Sunny>, No)}•Classification:•v = Yes.•v = No. \nSo, which class this new instance should be in? kXi=1\u0000(v, y(i))=1+0+1=2\n<latexit sha1_base64=\"T96nE93CkXvny6X6vmsrOwBJI7c=\">AAACDnicbVDLSsNAFJ34rPUVdekmWAotlZJUQTeFohuXFewDmjRMJpN26OTBzKQQQr7Ajb/ixoUibl2782+ctllo64ELh3Pu5d57nIgSLnT9W1lb39jc2i7sFHf39g8O1aPjLg9jhnAHhTRkfQdyTEmAO4IIivsRw9B3KO45k9uZ35tixkkYPIgkwpYPRwHxCIJCSrZaNnns2ylpGtlwYrqYCliZnifDtEKqWbVp1PSa0WzYakmv63Noq8TISQnkaNvql+mGKPZxIBCFnA8MPRJWCpkgiOKsaMYcRxBN4AgPJA2gj7mVzt/JtLJUXM0LmaxAaHP190QKfc4T35GdPhRjvuzNxP+8QSy8ayslQRQLHKDFIi+mmgi1WTaaSxhGgiaSQMSIvFVDY8ggEjLBogzBWH55lXQbdeOi3ri/LLVu8jgK4BScgQowwBVogTvQBh2AwCN4Bq/gTXlSXpR35WPRuqbkMyfgD5TPHzUymj8=</latexit>\n\n--- 第 12 页 ---\nHow can we determine similarity/distance •Suppose all features are continuous, where xf(i)represents the f -thfeature of x(i)•Euclidean distance: •Manhattan distance: \nRecall the difference and similarity with Lp norm\n--- 第 13 页 ---\nMore example•Example: X = (Height, Weight, RunningSpeed)  Y = SoccerPlayer? •D: in the table•New instance: <185, 91, 13.0>•Suppose that Euclidean distance is used. •Is this person a soccer player? v1v2v3y1828711.3No1899212.3Yes1787910.6Yes1839012.7No1859113.0New datumLeave this as exercise for you. \n--- 第 14 页 ---\nHow to work with a mix of discrete/continuous features•If we have a mix of discrete/continuous features: •Typically want to apply to continuous features some type of normalization (values range 0 to 1) or standardization (values distributed according to standard normal) •Many other possible distance functions we could use ... \n\n--- 第 15 页 ---\nPre-processing –Standardisation of numeric features •Given the training set D, determine the mean and stddevfor feature xi•Standardize each value of feature xias follows •Do the same for test instances, using the same 𝜇and 𝜎derived from the training data \n\n--- 第 16 页 ---\nConfidence for k-NN classification (example)•Classification steps are the same, recall•Given a class    , we compute•apply sigmoid function on the reciprocal of the accumulated distance  \nAccumulated distance to the supportive instancesHere, the confidences of all classes may not add up to 1Softmax?\n--- 第 17 页 ---\nSpeeding up k-NN\n--- 第 18 页 ---\nIssues•Choosing k•Increasing k reduces variance, increases bias •For high-dimensional space, problem that the nearest neighbor may not be very close at all! •Memory-based technique. Must make a pass through the data for each classification. This can be prohibitive for large data sets. \n--- 第 19 页 ---\nNearest neighbour problem •Given sample S = ((x1,y1),...,(xm,ym)) and a test point x, •It is to find the nearest k neighbours of x. •Note: for the algorithms, dimensionality N, i.e., number of features, is crucial. \n\n--- 第 20 页 ---\nEfficient Indexing: N=2•Algorithm •compute Voronoi diagram in O(m log m)•See algorithm in https://en.wikipedia.org/wiki/Fortune's_algorithm•use point location data structure to determine nearest neighbours  •complexity: O(m) space, O(log m) time. \n\n--- 第 21 页 ---\nEfficient Indexing: N>2•Voronoi diagram: size in O(mN/2) •Linear algorithm (no pre-processing): •compute distance ||x − xi|| for all i∈[1, m]. •complexity of distance computation: Ω(N m). •no additional space needed. k-NN is a “lazy” learning algorithm –does virtually nothing at training time but classification/prediction time can be costly when the training set is large \n--- 第 22 页 ---\nEfficient Indexing: N>2\n•Two general strategies for alleviating this weakness •don’t retain every training instance (edited nearest neighbor) •pre-processing. Use a smart data structure to look up nearest neighbors(e.g. a k-d tree) \n--- 第 23 页 ---\nEdited instance-based learning •Select a subset of the instances that still provide accurate classifications •Incremental deletion•Incremental growth\nQ1: Does ordering matter? Q2: If following the optimal ordering, do the two approaches produce the same subset of instances?  \n--- 第 24 页 ---\nk-d trees •A k-d tree is similar to a decision tree except that each internal node •stores one instance •splits on the median value of the feature having the highest variance \n\n--- 第 25 页 ---\nConstruction of k-d tree\nDetermine a triple: nthe feature having the highest variancenMedian value of the feature nRelated data point. Example:  --point f, x1= 6x1>6             f\n--- 第 26 页 ---\nConstruction of k-d tree\nDetermine a triple: nthe feature having the highest variancenMedian value of the feature nRelated data point. x1>6             fx2>10             cx2>5             hExample:  --point f, x1= 6--point c, x2= 10and point h, x2 = 5\n--- 第 27 页 ---\nConstruction of k-d tree\nThere can be other methods of constructing k-d trees, see e.g., https://en.wikipedia.org/wiki/K-d_tree#Nearest_neighbour_search\n--- 第 28 页 ---\nFinding nearest neighborson a k-d tree •use branch-and-bound search •priority queue stores •nodes considered•lower bound on their distance to query instance •lower bound given by distance using a single feature •average case: O(log2m) •worst case: O(m) where m is the size of the training-set \n--- 第 29 页 ---\nFinding nearest neighbours in a k-d tree \nIntuitively, for a pair (node,bound), bound represents the smallest guaranteed distance, i.e., greatest lower bound up to now, from the instance x(q) to the set of instances over which node is the selected one to splitFor example, the set of instances where root is the selected one to split over is the whole training set. (root,0) means that at the beginning, the guaranteed smallest distance to the training set is 0General idea: maintain a best_distand a priority queue of (node,bound)pair, and terminate when best_distbecomes no greater than bound.\n--- 第 30 页 ---\nk-d tree example (Manhattan distance) \nCan’t see any moreAvailable information\n--- 第 31 页 ---\nk-d tree example (Manhattan distance) \nAvailable information\nInitialise best_distas infinityPush in the root node\n--- 第 32 页 ---\nk-d tree example (Manhattan distance) \nAvailable information\nThe distance between qand f\n--- 第 33 页 ---\nk-d tree example (Manhattan distance) \nAvailable information\nWhy 0?Because qand care on the same side of f\n--- 第 34 页 ---\nk-d tree example (Manhattan distance) \nAvailable information\nWhy 4?Because the shortest distance from qto the other side of fis 44\n--- 第 35 页 ---\nk-d tree example (Manhattan distance) \nAvailable information\nThe distance between qand c\n--- 第 36 页 ---\nk-d tree example (Manhattan distance) \nAvailable information\neand qare at the same side of cband qare at the different side of c, and 7 is the shortest distance from qto the boundary\n--- 第 37 页 ---\nk-d tree example (Manhattan distance) \nAvailable information\nThe distance between qand eNow we can update best_distbecause 1<4\n--- 第 38 页 ---\nk-d tree example (Manhattan distance) \nAvailable information\ndand qare at the different side of e, and 1 is the shortest distance from qto the boundary\n--- 第 39 页 ---\nk-d tree example (Manhattan distance) \nAvailable information\nNow we have best_dist= bound, return the node e\n--- 第 40 页 ---\nExtended Materials: Voronoi Diagram Generation•https://en.wikipedia.org/wiki/Voronoi_diagram•https://courses.cs.washington.edu/courses/cse326/00wi/projects/voronoi.html\n\n--- 第 41 页 ---\nVariants of k-NN \n\n--- 第 42 页 ---\nk-nearest-neighbor regression •learning stage• given a training set (x(1), y(1)) ... (x(m) , y(m)), do nothing •(it’s sometimes called a lazy learner) •classification stage•given: an instance x(q)to classify•find the k training-set instances (x(1), y(1))... (x(k), y(k)) that are most similar to x(q)•return the value\nAverage over neighbours’ values\n--- 第 43 页 ---\nDistance-weighted nearest neighbor •We can have instances contribute to a prediction according to their distance from x(q)•classification: •regression: \nreciprocal of the distanceIntuition: instances closer to the current one is more important. \n--- 第 44 页 ---\nIrrelevant features in instance-based learning here’s a case in which thereis one relevant feature x1and a 1-NN rule classifies each instance correctly consider the effect of an irrelevant feature x2on distances and nearest neighbors\nCan you find a point (a,b) which is red, if classified only according to feature x1, and is green, if classified according to both features? \n--- 第 45 页 ---\nLocally weighted regression •one way around this limitation is to weight features differently •locally weighted regression is one nearest-neighborvariant that does this •prediction task •given: an instance x(q) to make a prediction for •find the k training-set instances (x(1), y(1)) ... (x(k), y(k)) that are most similar to x(q)•return the value \nWhat’s function f ?\n--- 第 46 页 ---\nLocally weighted regression •Determining function f•Assume that f is a linear function over the features, i.e., •find the weights wifor each x(q)by•After obtaining weights, for x(q), we have \ncan do this using gradient descent (to be introduced soon) \n\n--- 第 47 页 ---\nDiscussions\n--- 第 48 页 ---\nStrengths of instance-based learning \n•simple to implement •“training” is very efficient •adapts well to on-line learning •robust to noisy training data (when k > 1) •often works well in practice \n--- 第 49 页 ---\nLimitations of instance-based learning \n•sensitive to range of feature values •sensitive to irrelevant and correlated features, although ... •there are variants (such as locally weighted regression) that learn weights for different features •classification/prediction can be inefficient, although …•edited methods and k-d trees can help alleviate this weakness •doesn’t provide much insight into problem domain because there is no explicit model "}